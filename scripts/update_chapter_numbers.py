# -*- coding: utf-8 -*-
"""
更新文档章节编号的脚本 - 插入新第4章后的编号调整
"""

import re

def update_chapter_numbers():
    file_path = "documents/FastCAE技术分析报告_完整版.md"
    
    # 读取文件
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 定义替换规则 - 将原来的章节编号向后移动一位
    replacements = [
        # 第5章的子章节 (原第4章)
        (r'## 4\.2\. 网格划分模块', '## 5.2. 网格划分模块'),
        (r'### 4\.2\.1\. 网格引擎完整架构', '### 5.2.1. 网格引擎完整架构'),
        (r'### 4\.2\.2\. 12个核心接口类详解', '### 5.2.2. 12个核心接口类详解'),
        (r'### 4\.2\.3\. 三层尺寸场管理系统', '### 5.2.3. 三层尺寸场管理系统'),
        (r'### 4\.2\.4\. 网格引擎集成标准流程', '### 5.2.4. 网格引擎集成标准流程'),
        (r'## 4\.3\. 材料管理模块', '## 5.3. 材料管理模块'),
        (r'## 4\.4\. 求解器控制模块', '## 5.4. 求解器控制模块'),
        (r'## 4\.5\. 后处理模块', '## 5.5. 后处理模块'),
        (r'## 4\.6\. 二维图表组件', '## 5.6. 二维图表组件'),
        (r'### 4\.6\.1\. 二维图表组件完整架构', '### 5.6.1. 二维图表组件完整架构'),
        (r'### 4\.6\.2\. 专业图表功能特性', '### 5.6.2. 专业图表功能特性'),
        (r'## 4\.7\. 组件系统详解', '## 5.7. 组件系统详解'),
        (r'### 4\.7\.1\. FastCAE组件体系架构', '### 5.7.1. FastCAE组件体系架构'),
        (r'### 4\.7\.2\. 组件管理系统', '### 5.7.2. 组件管理系统'),
        (r'### 4\.7\.3\. 可视化适配器系统', '### 5.7.3. 可视化适配器系统'),
        (r'### 4\.7\.4\. 10个核心组件详解', '### 5.7.4. 10个核心组件详解'),
        (r'## 4\.8\. 插件系统', '## 5.8. 插件系统'),
        (r'### 4\.8\.1\. 插件系统完整架构', '### 5.8.1. 插件系统完整架构'),
        (r'## 4\.9\. 应用软件开发框架', '## 5.9. 应用软件开发框架'),
        (r'### 4\.9\.1\. Git子模块管理机制', '### 5.9.1. Git子模块管理机制'),
        (r'### 4\.9\.2\. 四层代码架构规范', '### 5.9.2. 四层代码架构规范'),
        (r'### 4\.9\.3\. 标准化构建系统', '### 5.9.3. 标准化构建系统'),
        
        # 第6章 (原第5章)
        (r'# 5\. 代码质量和设计模式分析', '# 6. 代码质量和设计模式分析'),
        (r'## 5\.1\. 核心设计模式应用', '## 6.1. 核心设计模式应用'),
        (r'### 5\.1\.1\. MVC架构模式', '### 6.1.1. MVC架构模式'),
        (r'### 5\.1\.2\. 工厂模式', '### 6.1.2. 工厂模式'),
        (r'### 5\.1\.3\. 单例模式', '### 6.1.3. 单例模式'),
        (r'### 5\.1\.4\. 适配器模式', '### 6.1.4. 适配器模式'),
        (r'### 5\.1\.5\. 策略模式', '### 6.1.5. 策略模式'),
        (r'### 5\.1\.6\. 观察者模式', '### 6.1.6. 观察者模式'),
        (r'## 5\.2\. 代码质量指标', '## 6.2. 代码质量指标'),
        (r'## 5\.3\. 具体使用示例和最佳实践', '## 6.3. 具体使用示例和最佳实践'),
        (r'### 5\.3\.1\. 应用程序开发完整示例', '### 6.3.1. 应用程序开发完整示例'),
        (r'### 5\.3\.2\. 网格划分完整流程示例', '### 6.3.2. 网格划分完整流程示例'),
        (r'### 5\.3\.3\. 二维图表创建完整示例', '### 6.3.3. 二维图表创建完整示例'),
        (r'### 5\.3\.4\. 插件开发完整示例', '### 6.3.4. 插件开发完整示例'),
        (r'### 5\.3\.5\. 最佳实践总结', '### 6.3.5. 最佳实践总结'),
        (r'## 5\.4\. 代码架构优势', '## 6.4. 代码架构优势'),
        
        # 第7章 (原第6章)
        (r'# 6\. 技术栈和依赖分析', '# 7. 技术栈和依赖分析'),
        (r'## 6\.1\. 核心技术栈', '## 7.1. 核心技术栈'),
        (r'### 6\.1\.1\. 开发语言和框架', '### 7.1.1. 开发语言和框架'),
        (r'### 6\.1\.2\. 第三方依赖库', '### 7.1.2. 第三方依赖库'),
        (r'### 6\.1\.3\. 构建系统', '### 7.1.3. 构建系统'),
        (r'## 6\.2\. 依赖关系分析', '## 7.2. 依赖关系分析'),
        (r'### 6\.2\.1\. 核心依赖', '### 7.2.1. 核心依赖'),
        (r'### 6\.2\.2\. 可选依赖', '### 7.2.2. 可选依赖'),
        (r'## 6\.3\. 平台兼容性', '## 7.3. 平台兼容性'),
        
        # 第8章 (原第7章)
        (r'# 7\. 项目优势和改进建议', '# 8. 项目优势和改进建议'),
        (r'## 7\.1\. 项目优势', '## 8.1. 项目优势'),
        (r'### 7\.1\.1\. 架构设计优势', '### 8.1.1. 架构设计优势'),
        (r'### 7\.1\.2\. 技术选型优势', '### 8.1.2. 技术选型优势'),
        (r'### 7\.1\.3\. 开发生态优势', '### 8.1.3. 开发生态优势'),
        (r'## 7\.2\. 改进建议', '## 8.2. 改进建议'),
        (r'### 7\.2\.1\. 短期改进', '### 8.2.1. 短期改进'),
        (r'### 7\.2\.2\. 中期改进', '### 8.2.2. 中期改进'),
        (r'### 7\.2\.3\. 长期规划', '### 8.2.3. 长期规划'),
        (r'## 7\.3\. 技术债务管理', '## 8.3. 技术债务管理'),
        (r'### 7\.3\.1\. 当前技术债务', '### 8.3.1. 当前技术债务'),
        (r'### 7\.3\.2\. 债务清理计划', '### 8.3.2. 债务清理计划'),
        
        # 第9章 (原第8章)
        (r'# 8\. 结论', '# 9. 结论'),
        (r'## 8\.1\. 技术成熟度评估', '## 9.1. 技术成熟度评估'),
        (r'## 8\.2\. 核心优势总结', '## 9.2. 核心优势总结'),
        (r'## 8\.3\. 发展潜力分析', '## 9.3. 发展潜力分析'),
        (r'## 8\.4\. 建议与展望', '## 9.4. 建议与展望'),
    ]
    
    # 执行替换
    for pattern, replacement in replacements:
        content = re.sub(pattern, replacement, content)
        print(f"替换: {pattern} -> {replacement}")
    
    # 写入文件
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("章节编号更新完成！")

if __name__ == "__main__":
    update_chapter_numbers()
